; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Rainmeter Shortcut Creator"
#define MyAppVersion "1.0"
#define MyAppPublisher "Open Source"
#define MyAppURL "www.github.com"
#define MyAppExeName "Rainmeter_Shortcut_Creator.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{5CDB6E4B-7083-4C5E-8FF0-FEFB675E5A5C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes   
ChangesEnvironment=yes

[Code]
var
  RainmeterDirPage: TInputDirWizardPage;

procedure InitializeWizard;
begin
  // Create the page

  RainmeterDirPage := CreateInputDirPage(wpSelectDir,
    'Select Rainmeter Directory', 'Where is Rainmeter installed?',
    'Select the folder in Rainmeter is installed, then click Next.',
    False, '');
  RainmeterDirPage.Add('');

  RainmeterDirPage.Values[0] := GetPreviousData('RainmeterDir', '');
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
  // Store the selected folder for further reinstall/upgrade
  SetPreviousData(PreviousDataKey, 'RainmeterDir', RainmeterDirPage.Values[0]);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  // Set default folder if empty
  if RainmeterDirPage.Values[0] = '' then
     RainmeterDirPage.Values[0] := ExpandConstant('{userdocs}\Rainmeter');
  Result := True;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
  MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
  S: String;
begin
  // Fill the 'Ready Memo' with the normal settings and the custom settings
  S := '';
  S := S + 'Rainmeter path' + NewLine;
  S := S + Space + RainmeterDirPage.Values[0] + NewLine;

  Result := S;
end;

function GetRainmeterDir(Param: String): String;
begin
  { Return the selected RainmeterDir }
  Result := RainmeterDirPage.Values[0];
end;

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\Tim\Documents\visual studio 2013\Projects\Rainmeter_Shortcut_Creator\Rainmeter_Shortcut_Creator\bin\Debug\Rainmeter_Shortcut_Creator.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Registry]
; Start "Software\My Company\My Program" keys under HKEY_CURRENT_USER
; and HKEY_LOCAL_MACHINE. The flags tell it to always delete the
; "My Program" keys upon uninstall, and delete the "My Company" keys
; if there is nothing left in them.
Root: HKCR; Subkey: "exefile\shell\Create Rainmeter Shortcut"; Flags: uninsdeletekey    
Root: HKCR; Subkey: "exefile\shell\Create Rainmeter Shortcut\command"; Flags: uninsdeletekey     
Root: HKCR; Subkey: "exefile\shell\Create Rainmeter Shortcut\command"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName} %1"
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueType: String; ValueName: "{app}\{#MyAppExeName}"; ValueData: "RUNASADMIN";Flags: uninsdeletevalue;
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"RAINMETER_HOME"; ValueData:{code:GetRainmeterDir}; Flags: preservestringtype ;

